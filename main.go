// Attach probes to openSSL3 SSL_read and SSL_write

//go:build amd64

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target amd64 -type ssl_data_event_t bpf probes.c -- -I../headers

const (
	// The path to the binary we want to trace. If it were a symbol defined in a process, we'd point it
	// there. In our case, we want to trace anything that uses this particular symbol from libssl.so.3, so
	// we point there rather than the binary that is using it.
	// You'll need to update this to point to the path of the library on your system! Use "ldd `which curl`" to find it.
	binPath = "/lib/x86_64-linux-gnu/libssl.so.3"
)

func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable(binPath)
	if err != nil {
		log.Fatalf("opening executable: %s", err)
	}

	// Set up our probes
	up_ssl_write, err := ex.Uprobe("SSL_write", objs.UprobeLibsslWrite, nil)
	if err != nil {
		log.Fatalf("creating uprobe - SSL_write: %s", err)
	}
	defer up_ssl_write.Close()

	up_ssl_read, err := ex.Uprobe("SSL_read", objs.UprobeLibsslRead, nil)
	if err != nil {
		log.Fatalf("creating uprobe - SSL_read: %s", err)
	}
	defer up_ssl_read.Close()

	uretprobe_ssl_read, err := ex.Uretprobe("SSL_read", objs.UretprobeLibsslRead, nil)
	if err != nil {
		log.Fatalf("Creating uretprobe - SSL_read: %s", err)
	}
	defer uretprobe_ssl_read.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.SslDataEventMap)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfSslDataEventT is generated by bpf2go.
	var event bpfSslDataEventT
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}

		// Parse the ringbuf event entry into a bpfSslDataEventT structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("error parsing ringbuf event: %s", err)
			continue
		}

		msg_bytes := event.Buf[0:event.Len]
		msg := unix.ByteSliceToString(msg_bytes)

		msg_type := "Sent"
		if event.IsOutgoing == 0 {
			msg_type = "Received"
		}

		log.Printf("%s: pid: %d size: %d\n%s\n\n", msg_type, event.Pid, event.Len, msg)
	}
}
